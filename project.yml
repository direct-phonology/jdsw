title: "Parsing the _Jingdian Shiwen_"
description: |
  This project is an attempt to convert the annotations compiled by the Tang dynasty scholar [Lu Deming (陸德明)](https://en.wikipedia.org/wiki/Lu_Deming) in the [_Jingdian Shiwen_ (经典释文)](https://en.wikipedia.org/wiki/Jingdian_Shiwen) into a structured form that separates phonology, glosses, and references to secondary sources. A [spaCy](https://spacy.io/) pipeline is configured to parse and tag the annotations, and [prodigy](https://prodi.gy/) is used for guided annotation of the training data.

  The source text used is from the [Kanseki Repository](https://www.kanripo.org/), and has been preprocessed to remove punctuation, whitespace, and any non-Chinese characters. The results are saved in JSON-lines (`.jsonl`) format, with the aim being output that can be used for machine learning, natural language processing, and other computational applications.

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  dataset: "jdsw_annotations"
  lang: "och"
  gpu_id: -1
  eval_split: 0.25

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "configs", "corpus", "metrics", "packages", "scripts", "training"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "prodigy.json"
    description: "Prodigy configuration file."
  - dest: "assets/instructions.html"
    description: "HTML file with annotation instructions."
  - dest: "assets/annotations.jsonl"
    description: "Corpus of annotations from the _Jingdian Shiwen_, including their headwords."
  - dest: "assets/ner_patterns.jsonl"
    description: "Patterns for pre-selecting regions in annotation text."

# Workflows are series of commands that are run in order and often depend on 
# each other.
# workflows: []

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "install"
    help: "Install dependencies"
    script:
      - "python -m pip install -r requirements.txt"

  - name: "ner_manual"
    help: "Mark people and works referenced in annotations"
    script:
      - "python -m prodigy ner.manual ${vars.dataset} blank:${vars.lang} assets/annotations.jsonl --patterns assets/ner_patterns.jsonl --label PERSON,WORK_OF_ART"
    deps:
      - "assets/ner_patterns.jsonl"
      - "assets/annotations.jsonl"
