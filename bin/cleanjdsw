#!/usr/bin/env python3

from pathlib import Path

import typer

from lib.patterns import BLANK


def main(jdsw_file: Path, sbck_file: Path, overwrite: bool = False) -> None:
    """
    Compare the JDSW edition of a text with the SBCK edition of the same text.

    Annotations in the JDSW edition that correspond to the source text in the
    SBCK edition are noted as 'source', while those that correspond to the
    commentary are noted as 'commentary' in a new column. Annotations that don't
    appear to map  onto anywhere in the SBCK edition will have a blank. Output
    is written to stdout or, optionally, to overwrite the JDSW input file.

    $ cleanjdsw jdsw/gongyang/001.txt sbck/gongyang/001.txt --overwrite
    """

    # read JDSW edition into list of target:annotation tuples
    jdsw_text = jdsw_file.open("r", encoding="utf-8").read()
    jdsw = [line.split("\t") for line in jdsw_text.splitlines()]

    # read SBCK edition into list of source:commentary tuples
    sbck_text = sbck_file.open("r", encoding="utf-8").read()
    sbck = [line.split("\t") for line in sbck_text.splitlines()]

    # construct a map of the SBCK edition where each character index is mapped
    # to a boolean indicating whether that character is in the source text
    sbck_map = []
    sbck_chars = sbck_text.replace("\t", "").replace("\n", "")
    for source, commentary in sbck:
        sbck_map += [True for i in range(len(source))]
        sbck_map += [False for i in range(len(commentary))]
    assert len(sbck_map) == len(sbck_chars)

    # use a pointer into the full SBCK text to find the next possible place an
    # annotation from the JDSW could apply. if the annotation target is in the
    # source text, we advance the pointer and keep that annotation. if the
    # annotation target is in the commentary, we advance the pointer and
    # ignore the annotation. if the target isn't found, log it.
    output: list[tuple[str, str, str]] = []
    pointer = 0
    for target, annotation in jdsw:
        remaining = sbck_chars[pointer:]
        location = remaining.find(target)
        if location == -1:
            output.append((target, annotation, BLANK))
        else:
            pointer = location
            if sbck_map[location] is True:
                output.append((target, annotation, "source"))
            else:
                output.append((target, annotation, "commentary"))

    # rejoin output lines into a single string
    output_text = "\n".join(["\t".join(line) for line in output])

    # overwrite input JDSW file if requested, otherwise write to stdout
    if overwrite:
        jdsw_file.open("w", encoding="utf-8").write(output_text)
    else:
        typer.echo(output_text)


if __name__ == "__main__":
    typer.run(main)

__doc__ = main.__doc__  # type: ignore
